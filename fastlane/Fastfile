# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
#
# https://docs.fastlane.tools/actions
default_platform(:mac)

org       = "jamztang"
name      = "CITesting"
branch    = environment_variable(get: "APPCENTER_BRANCH")
token     = environment_variable(get: "GITHUB_TOKEN")
xcodeproj = "#{name}.xcodeproj"

platform :mac do
  desc "Description of what the lane does"

  before_all do
    #update_fastlane(nightly: true)
    setup_circle_ci
    #import_certificate(
    #  keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
    #  keychain_password: ENV["MATCH_KEYCHAIN_PASSWORD"],
    #  certificate_path: '/tmp/Certificates.p12',
    #  certificate_password: ENV["CERTIFICATE_PASSWORD"] || "default"
    #)
  end

  lane :version do
    version     = get_version_number(target: "#{name}")
    build       = get_build_number(xcodeproj: "#{xcodeproj}")
  end

  lane :checkout do
    sh("git checkout #{branch}")
  end

  lane :commit do
    increment_build_number
    increment_version_number
    version     = get_version_number(target: "#{name}")
    build       = get_build_number(xcodeproj: "#{xcodeproj}")
    message     = "#{version} (#{build}) [skip ci]"
    commit_version_bump(
      message: message
    )
  end

  lane :tag do
    version     = get_version_number(target: "#{name}")
    message     = "#{branch}/#{version}"
    add_git_tag(
      tag: message
    )
  end

  lane :configremote do
    puts "token is #{token}"
    #sh("sed -i '' 's#git@github.com\:#https\://#{token}@github.com/#' ../.git/config")
    sh("git remote add temp https://#{token}@github.com/#{org}/#{name}")
  end

  lane :push do
    push_to_git_remote(
      remote: "temp"
      )
  end

  lane :wrapup do
    checkout
    tag
    commit
    configremote
    push
  end

  lane :beta do
    get_certificates           # invokes cert
    get_provisioning_profile   # invokes sigh
    build_app
  end

  lane :builddebug do
    gym(
      configuration: "Debug"
    )
  end

  lane :buildrelease do
    gym(
      configuration: "Release"
    )
  end
end

